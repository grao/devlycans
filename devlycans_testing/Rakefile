###################################################
# Section to setup necessary env vars and overrides

EXPAND = ENV['CUKE_EXPAND'] ? "--expand" : ""

COLOR = ENV['FORCE_COLOR'] ? "-c" : ""

OTHER_TAGS = ENV['OTHER_TAGS'] ? "--tags "+ENV['OTHER_TAGS'] : ""

#######################################################

$SUCCESS=true
$failures = Hash.new

#######################################################################################################
# Helper defs

# This method is to run a given test or set of tests that have a dependency on a fixture being loaded
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
# Inputs: (String) collectionName = name of mongo collection to load fixture data to
# Inputs: (String) fixtureFileName = name of json file in the test/data folder
def runFixtureAndTests(testDirPath, collectionName, fixtureFileName)
  setFixture(collectionName,fixtureFileName) {runTests(testDirPath)}
end

# This method is to run a given test of set of test where a fixture is not needed
# Inputs: (String) testDirPath = path to a directory of tests or a single feature file (starting in acceptance-tests directory)
def runTests(testDirPath)
  sh "cucumber #{testDirPath} #{EXPAND} --tags ~@wip #{OTHER_TAGS} #{COLOR} -f junit --out ./target -f pretty" do |success, exit_code|
    if success
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Passed"
    else
      $failures[testDirPath[testDirPath.rindex('/')+1..-1]] = "Failed"
      $SUCCESS=false
    end
  end
end



def displayFailureReport()
  startRed = "\e[31m"
  startGreen = "\e[32m"
  colorReset = "\e[0m"
  
  $failures.each do |key, value|
    if ENV['FORCE_COLOR']
      puts "#{startRed}#{key} tests #{value}#{colorReset}" if value == "Failed"
      puts "#{startGreen}#{key} tests #{value}#{colorReset}" if value == "Passed"
    else
      puts "#{key} tests #{value}"
    end
    
  end
end

############################################################################################################


######################################################################################################
# Rake tasks


desc "Run Liferay Tests"
task :liferay => [:liferayTest] do
  displayFailureReport()
  if $SUCCESS
    puts "Completed All Tests"
  else
    raise "Tests have failed"
  end
end

###########################################################
#SLI Liferay testing
###########################################################

desc "Run the testing for life ray SLI for admin"
task :liferayTest do
   runTests("features/liferay/SLI_admin.feature")
   runTests("features/liferay/SLI_normal_user.feature")
   runTests("features/liferay/NY_Realm_EULA_agree.feature")
   runTests("features/liferay/report_problem.feature")
   runTests("features/liferay/admin_page.feature")
   runTests("features/liferay/SSD_Realm_linda.feature")
   runTests("features/liferay/WSRP.feature")
  
# runTests("test/features/liferay/IL_Realm_EULA_agree.feature")
  
end

