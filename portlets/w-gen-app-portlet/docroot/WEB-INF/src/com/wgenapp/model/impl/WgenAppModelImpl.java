/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.wgenapp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.wgenapp.model.WgenApp;
import com.wgenapp.model.WgenAppModel;
import com.wgenapp.model.WgenAppSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the WgenApp service. Represents a row in the &quot;WgenApp_WgenApp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wgenapp.model.WgenAppModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WgenAppImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WgenAppImpl
 * @see com.wgenapp.model.WgenApp
 * @see com.wgenapp.model.WgenAppModel
 * @generated
 */
@JSON(strict = true)
public class WgenAppModelImpl extends BaseModelImpl<WgenApp>
	implements WgenAppModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wgen app model instance should use the {@link com.wgenapp.model.WgenApp} interface instead.
	 */
	public static final String TABLE_NAME = "WgenApp_WgenApp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "WgenAppId", Types.BIGINT },
			{ "WgenAppTitle", Types.VARCHAR },
			{ "WgenAppDescription", Types.VARCHAR },
			{ "WgenAppURL", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table WgenApp_WgenApp (WgenAppId LONG not null primary key,WgenAppTitle VARCHAR(75) null,WgenAppDescription VARCHAR(1000) null,WgenAppURL VARCHAR(1000) null)";
	public static final String TABLE_SQL_DROP = "drop table WgenApp_WgenApp";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.wgenapp.model.WgenApp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.wgenapp.model.WgenApp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WgenApp toModel(WgenAppSoap soapModel) {
		WgenApp model = new WgenAppImpl();

		model.setWgenAppId(soapModel.getWgenAppId());
		model.setWgenAppTitle(soapModel.getWgenAppTitle());
		model.setWgenAppDescription(soapModel.getWgenAppDescription());
		model.setWgenAppURL(soapModel.getWgenAppURL());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WgenApp> toModels(WgenAppSoap[] soapModels) {
		List<WgenApp> models = new ArrayList<WgenApp>(soapModels.length);

		for (WgenAppSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.wgenapp.model.WgenApp"));

	public WgenAppModelImpl() {
	}

	public long getPrimaryKey() {
		return _WgenAppId;
	}

	public void setPrimaryKey(long primaryKey) {
		setWgenAppId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_WgenAppId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return WgenApp.class;
	}

	public String getModelClassName() {
		return WgenApp.class.getName();
	}

	@JSON
	public long getWgenAppId() {
		return _WgenAppId;
	}

	public void setWgenAppId(long WgenAppId) {
		_WgenAppId = WgenAppId;
	}

	@JSON
	public String getWgenAppTitle() {
		if (_WgenAppTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _WgenAppTitle;
		}
	}

	public void setWgenAppTitle(String WgenAppTitle) {
		_WgenAppTitle = WgenAppTitle;
	}

	@JSON
	public String getWgenAppDescription() {
		if (_WgenAppDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _WgenAppDescription;
		}
	}

	public void setWgenAppDescription(String WgenAppDescription) {
		_WgenAppDescription = WgenAppDescription;
	}

	@JSON
	public String getWgenAppURL() {
		if (_WgenAppURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _WgenAppURL;
		}
	}

	public void setWgenAppURL(String WgenAppURL) {
		_WgenAppURL = WgenAppURL;
	}

	@Override
	public WgenApp toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (WgenApp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					WgenApp.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		WgenAppImpl wgenAppImpl = new WgenAppImpl();

		wgenAppImpl.setWgenAppId(getWgenAppId());
		wgenAppImpl.setWgenAppTitle(getWgenAppTitle());
		wgenAppImpl.setWgenAppDescription(getWgenAppDescription());
		wgenAppImpl.setWgenAppURL(getWgenAppURL());

		wgenAppImpl.resetOriginalValues();

		return wgenAppImpl;
	}

	public int compareTo(WgenApp wgenApp) {
		long primaryKey = wgenApp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		WgenApp wgenApp = null;

		try {
			wgenApp = (WgenApp)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = wgenApp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<WgenApp> toCacheModel() {
		WgenAppCacheModel wgenAppCacheModel = new WgenAppCacheModel();

		wgenAppCacheModel.WgenAppId = getWgenAppId();

		wgenAppCacheModel.WgenAppTitle = getWgenAppTitle();

		String WgenAppTitle = wgenAppCacheModel.WgenAppTitle;

		if ((WgenAppTitle != null) && (WgenAppTitle.length() == 0)) {
			wgenAppCacheModel.WgenAppTitle = null;
		}

		wgenAppCacheModel.WgenAppDescription = getWgenAppDescription();

		String WgenAppDescription = wgenAppCacheModel.WgenAppDescription;

		if ((WgenAppDescription != null) && (WgenAppDescription.length() == 0)) {
			wgenAppCacheModel.WgenAppDescription = null;
		}

		wgenAppCacheModel.WgenAppURL = getWgenAppURL();

		String WgenAppURL = wgenAppCacheModel.WgenAppURL;

		if ((WgenAppURL != null) && (WgenAppURL.length() == 0)) {
			wgenAppCacheModel.WgenAppURL = null;
		}

		return wgenAppCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{WgenAppId=");
		sb.append(getWgenAppId());
		sb.append(", WgenAppTitle=");
		sb.append(getWgenAppTitle());
		sb.append(", WgenAppDescription=");
		sb.append(getWgenAppDescription());
		sb.append(", WgenAppURL=");
		sb.append(getWgenAppURL());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.wgenapp.model.WgenApp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>WgenAppId</column-name><column-value><![CDATA[");
		sb.append(getWgenAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>WgenAppTitle</column-name><column-value><![CDATA[");
		sb.append(getWgenAppTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>WgenAppDescription</column-name><column-value><![CDATA[");
		sb.append(getWgenAppDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>WgenAppURL</column-name><column-value><![CDATA[");
		sb.append(getWgenAppURL());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WgenApp.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			WgenApp.class
		};
	private long _WgenAppId;
	private String _WgenAppTitle;
	private String _WgenAppDescription;
	private String _WgenAppURL;
	private transient ExpandoBridge _expandoBridge;
	private WgenApp _escapedModelProxy;
}