/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.slc.sli.headerfooter.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.slc.sli.headerfooter.model.HeaderFooter;
import org.slc.sli.headerfooter.model.HeaderFooterModel;
import org.slc.sli.headerfooter.model.HeaderFooterSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the HeaderFooter service. Represents a row in the &quot;wgen_HeaderFooter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.slc.sli.headerfooter.model.HeaderFooterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HeaderFooterImpl}.
 * </p>
 *
 * @author manoj
 * @see HeaderFooterImpl
 * @see org.slc.sli.headerfooter.model.HeaderFooter
 * @see org.slc.sli.headerfooter.model.HeaderFooterModel
 * @generated
 */
@JSON(strict = true)
public class HeaderFooterModelImpl extends BaseModelImpl<HeaderFooter>
	implements HeaderFooterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a header footer model instance should use the {@link org.slc.sli.headerfooter.model.HeaderFooter} interface instead.
	 */
	public static final String TABLE_NAME = "wgen_HeaderFooter";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "type_", Types.VARCHAR },
			{ "data_", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table wgen_HeaderFooter (id_ LONG not null primary key,type_ VARCHAR(75) null,data_ TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table wgen_HeaderFooter";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.slc.sli.headerfooter.model.HeaderFooter"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.slc.sli.headerfooter.model.HeaderFooter"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.slc.sli.headerfooter.model.HeaderFooter"),
			true);
	public static long TYPE_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static HeaderFooter toModel(HeaderFooterSoap soapModel) {
		HeaderFooter model = new HeaderFooterImpl();

		model.setId(soapModel.getId());
		model.setType(soapModel.getType());
		model.setData(soapModel.getData());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<HeaderFooter> toModels(HeaderFooterSoap[] soapModels) {
		List<HeaderFooter> models = new ArrayList<HeaderFooter>(soapModels.length);

		for (HeaderFooterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.slc.sli.headerfooter.model.HeaderFooter"));

	public HeaderFooterModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return HeaderFooter.class;
	}

	public String getModelClassName() {
		return HeaderFooter.class.getName();
	}

	@JSON
	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	@JSON
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@JSON
	public String getData() {
		if (_data == null) {
			return StringPool.BLANK;
		}
		else {
			return _data;
		}
	}

	public void setData(String data) {
		_data = data;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public HeaderFooter toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (HeaderFooter)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					HeaderFooter.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		HeaderFooterImpl headerFooterImpl = new HeaderFooterImpl();

		headerFooterImpl.setId(getId());
		headerFooterImpl.setType(getType());
		headerFooterImpl.setData(getData());

		headerFooterImpl.resetOriginalValues();

		return headerFooterImpl;
	}

	public int compareTo(HeaderFooter headerFooter) {
		long primaryKey = headerFooter.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		HeaderFooter headerFooter = null;

		try {
			headerFooter = (HeaderFooter)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = headerFooter.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		HeaderFooterModelImpl headerFooterModelImpl = this;

		headerFooterModelImpl._originalType = headerFooterModelImpl._type;

		headerFooterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<HeaderFooter> toCacheModel() {
		HeaderFooterCacheModel headerFooterCacheModel = new HeaderFooterCacheModel();

		headerFooterCacheModel.id = getId();

		headerFooterCacheModel.type = getType();

		String type = headerFooterCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			headerFooterCacheModel.type = null;
		}

		headerFooterCacheModel.data = getData();

		String data = headerFooterCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			headerFooterCacheModel.data = null;
		}

		return headerFooterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", data=");
		sb.append(getData());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.slc.sli.headerfooter.model.HeaderFooter");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data</column-name><column-value><![CDATA[");
		sb.append(getData());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = HeaderFooter.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			HeaderFooter.class
		};
	private long _id;
	private String _type;
	private String _originalType;
	private String _data;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private HeaderFooter _escapedModelProxy;
}